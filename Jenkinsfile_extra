pipeline {
    agent any

    parameters {
        choice(
            name: 'TEST_MODE',
            choices: ['1', '2', '3'],
            description: 'Select the test mode'
        )
        choice(
            name: 'BACKEND_FUNCTION',
            choices: ['add', 'update', 'get'],
            description: 'Choose the backend test function'
        )
        string(name: 'USER_ID', defaultValue: '123', description: 'User ID to be tested')
        string(name: 'USER_NAME', defaultValue: 'defaultUser', description: 'Name of the user for backend tests', visibility: 'hidden') // Set visibility to hidden initially
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'pip install -r requirements.txt'
            }
        }

        stage('Frontend Testing') {
            when {
                expression {
                    return params.TEST_MODE == '1'
                }
            }
            steps {
                sh "python frontend_testing.py test ${params.USER_ID}" // Use 'test' directly as action is always test
            }
        }

        stage('Backend Testing') {
            when {
                expression {
                    return params.TEST_MODE == '2'
                }
            }
            steps {
                script {
                    if (params.BACKEND_FUNCTION == 'get') {
                        sh "python backend_testing.py get ${params.USER_ID}"
                    } else {
                        sh "python backend_testing.py ${params.BACKEND_FUNCTION} ${params.USER_ID} ${params.USER_NAME}"
                    }
                }
            }
        }

        stage('Combined Testing') {
            when {
                expression {
                    return params.TEST_MODE == '3'
                }
            }
            steps {
                sh "python combined_testing.py test ${params.USER_ID}" // Use 'test' directly as action is always test
            }
        }
    }

    post {
        failure {
            mail to: 'janq79@gmail.com',
                 subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                 body: "Check console output at ${env.BUILD_URL} to view the results."
        }
    }
}